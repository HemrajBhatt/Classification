{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Improving the model performance through K-fold cross validation and Grid Search\n",
    "\n",
    "- Predicting whether customers will Purchase SUV or not "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Importing libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Importing the dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = pd.read_csv(r\"F:\\Torrent Downloads\\Machine Learning A-Z™ Hands-On Python & R In Data Science\\[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science\\12. Logistic Regression\\Data\\Logistic_Regression\\Social_Network_Ads.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Purchased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>15624510</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>19000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>15810944</td>\n",
       "      <td>Male</td>\n",
       "      <td>35</td>\n",
       "      <td>20000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>15668575</td>\n",
       "      <td>Female</td>\n",
       "      <td>26</td>\n",
       "      <td>43000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>15603246</td>\n",
       "      <td>Female</td>\n",
       "      <td>27</td>\n",
       "      <td>57000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>15804002</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>76000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>15728773</td>\n",
       "      <td>Male</td>\n",
       "      <td>27</td>\n",
       "      <td>58000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>15598044</td>\n",
       "      <td>Female</td>\n",
       "      <td>27</td>\n",
       "      <td>84000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>15694829</td>\n",
       "      <td>Female</td>\n",
       "      <td>32</td>\n",
       "      <td>150000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>15600575</td>\n",
       "      <td>Male</td>\n",
       "      <td>25</td>\n",
       "      <td>33000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>15727311</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>65000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    User ID  Gender  Age  EstimatedSalary  Purchased\n",
       "0  15624510    Male   19            19000          0\n",
       "1  15810944    Male   35            20000          0\n",
       "2  15668575  Female   26            43000          0\n",
       "3  15603246  Female   27            57000          0\n",
       "4  15804002    Male   19            76000          0\n",
       "5  15728773    Male   27            58000          0\n",
       "6  15598044  Female   27            84000          0\n",
       "7  15694829  Female   32           150000          1\n",
       "8  15600575    Male   25            33000          0\n",
       "9  15727311  Female   35            65000          0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = dataset.iloc[:, [2,3]].values\n",
    "y = dataset.iloc[:, 4].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y Shape: (400,)\n",
      "X Shape: (400, 2)\n"
     ]
    }
   ],
   "source": [
    "print(\"y Shape:\", y.shape)\n",
    "print(\"X Shape:\", X.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Splitting data into Training set and Test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Feature Scaling\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaling = StandardScaler()\n",
    "X_train = scaling.fit_transform(X_train)\n",
    "X_test = scaling.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Fitting kernel SVC  classifier to the Training set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='auto_deprecated',\n",
       "    kernel='rbf', max_iter=-1, probability=False, random_state=0,\n",
       "    shrinking=True, tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "classifier = SVC(kernel = 'rbf', random_state= 0)\n",
    "classifier.fit(X_train, y_train) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Predicting the Test Set results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = classifier.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Creating the confusion matrix "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-- showing correct and incorrect predictions made by the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[64,  4],\n",
       "       [ 3, 29]], dtype=int64)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.93"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## predicting accuracy = (65+24)/(65+24+3+8)\n",
    "from sklearn.metrics import accuracy_score\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "accuracy\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. K-Fold Cross Validation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.80645161, 0.96666667, 0.8       , 0.93333333, 0.86666667,\n",
       "       0.83333333, 0.93333333, 0.93333333, 0.96666667, 0.96551724])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "## here, we are considering k = 10 \n",
    "accuracies = cross_val_score(estimator= classifier, X = X_train, y = y_train, cv = 10, n_jobs= -1)\n",
    "accuracies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we can see 10 accuracies, which are obtained through corss validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9005302187615868"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## optimum accuracy, i.e. mean of all the accuracies\n",
    "accuracies.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.06388957356626285"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## standard deviation between accuracies\n",
    "accuracies.std()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we can see that standard deviation is not too large and mean accuracy is also quite good."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Grid Search\n",
    "    - with the help of Grid Search, we can find improve the performance of the model because Grid Search helps in finding optimal hyperparameters for the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from sklearn. model_selection import GridSearchCV\n",
    "parameters = [{'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n",
    "              {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.5, 0.1, 0.2, 0.3, 0.4, 0.6, 0.7, 0.8, 0.8]}]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py:814: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n",
      "  DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "grid_search = GridSearchCV(estimator= classifier,\n",
    "                          param_grid= parameters,\n",
    "                          scoring= 'accuracy',\n",
    "                          cv = 10,\n",
    "                          n_jobs= -1)\n",
    "grid_search = grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now we can see the attributes \n",
    "\n",
    "    - cv_results_ \n",
    "    - best_estimator_\n",
    "    - best_score_\n",
    "    - best_params_\n",
    "    \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_C</th>\n",
       "      <th>param_kernel</th>\n",
       "      <th>param_gamma</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>...</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>split4_test_score</th>\n",
       "      <th>split5_test_score</th>\n",
       "      <th>split6_test_score</th>\n",
       "      <th>split7_test_score</th>\n",
       "      <th>split8_test_score</th>\n",
       "      <th>split9_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.001800</td>\n",
       "      <td>0.000600</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>1</td>\n",
       "      <td>linear</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'C': 1, 'kernel': 'linear'}</td>\n",
       "      <td>0.741935</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.896552</td>\n",
       "      <td>0.813333</td>\n",
       "      <td>0.088598</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.003101</td>\n",
       "      <td>0.000831</td>\n",
       "      <td>0.000200</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>10</td>\n",
       "      <td>linear</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'C': 10, 'kernel': 'linear'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.931034</td>\n",
       "      <td>0.816667</td>\n",
       "      <td>0.093724</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.018201</td>\n",
       "      <td>0.009714</td>\n",
       "      <td>0.001000</td>\n",
       "      <td>0.001732</td>\n",
       "      <td>100</td>\n",
       "      <td>linear</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'C': 100, 'kernel': 'linear'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.931034</td>\n",
       "      <td>0.816667</td>\n",
       "      <td>0.093724</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.084305</td>\n",
       "      <td>0.047033</td>\n",
       "      <td>0.000501</td>\n",
       "      <td>0.000501</td>\n",
       "      <td>1000</td>\n",
       "      <td>linear</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'C': 1000, 'kernel': 'linear'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.931034</td>\n",
       "      <td>0.816667</td>\n",
       "      <td>0.093724</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.001100</td>\n",
       "      <td>0.000301</td>\n",
       "      <td>0.000200</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>1</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.5</td>\n",
       "      <td>{'C': 1, 'gamma': 0.5, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.064008</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.001400</td>\n",
       "      <td>0.000489</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>1</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 1, 'gamma': 0.1, 'kernel': 'rbf'}</td>\n",
       "      <td>0.838710</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.893333</td>\n",
       "      <td>0.050363</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0.001700</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>1</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.2</td>\n",
       "      <td>{'C': 1, 'gamma': 0.2, 'kernel': 'rbf'}</td>\n",
       "      <td>0.838710</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.050802</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>0.001200</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000800</td>\n",
       "      <td>0.000872</td>\n",
       "      <td>1</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.3</td>\n",
       "      <td>{'C': 1, 'gamma': 0.3, 'kernel': 'rbf'}</td>\n",
       "      <td>0.838710</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.050802</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>0.001300</td>\n",
       "      <td>0.000459</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>1</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.4</td>\n",
       "      <td>{'C': 1, 'gamma': 0.4, 'kernel': 'rbf'}</td>\n",
       "      <td>0.838710</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.058905</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>0.001600</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>1</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.6</td>\n",
       "      <td>{'C': 1, 'gamma': 0.6, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.067390</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>0.001300</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>1</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.7</td>\n",
       "      <td>{'C': 1, 'gamma': 0.7, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.903333</td>\n",
       "      <td>0.063046</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>0.001300</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>1</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.8</td>\n",
       "      <td>{'C': 1, 'gamma': 0.8, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.067390</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>0.001601</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>0.000700</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>1</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.8</td>\n",
       "      <td>{'C': 1, 'gamma': 0.8, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.067390</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>0.001800</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>10</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.5</td>\n",
       "      <td>{'C': 10, 'gamma': 0.5, 'kernel': 'rbf'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.886667</td>\n",
       "      <td>0.063991</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>0.001700</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>0.000600</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>10</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}</td>\n",
       "      <td>0.838710</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.890000</td>\n",
       "      <td>0.060853</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>0.002100</td>\n",
       "      <td>0.000301</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>10</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.2</td>\n",
       "      <td>{'C': 10, 'gamma': 0.2, 'kernel': 'rbf'}</td>\n",
       "      <td>0.838710</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.893333</td>\n",
       "      <td>0.068983</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>0.001899</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>0.000501</td>\n",
       "      <td>0.000501</td>\n",
       "      <td>10</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.3</td>\n",
       "      <td>{'C': 10, 'gamma': 0.3, 'kernel': 'rbf'}</td>\n",
       "      <td>0.838710</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.070022</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>0.001799</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>0.000601</td>\n",
       "      <td>0.000491</td>\n",
       "      <td>10</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.4</td>\n",
       "      <td>{'C': 10, 'gamma': 0.4, 'kernel': 'rbf'}</td>\n",
       "      <td>0.838710</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.903333</td>\n",
       "      <td>0.070022</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>0.002000</td>\n",
       "      <td>0.000447</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>0.000671</td>\n",
       "      <td>10</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.6</td>\n",
       "      <td>{'C': 10, 'gamma': 0.6, 'kernel': 'rbf'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.890000</td>\n",
       "      <td>0.067127</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>0.001899</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>0.000601</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>10</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.7</td>\n",
       "      <td>{'C': 10, 'gamma': 0.7, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.893333</td>\n",
       "      <td>0.058189</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>0.002000</td>\n",
       "      <td>0.000448</td>\n",
       "      <td>0.000601</td>\n",
       "      <td>0.000664</td>\n",
       "      <td>10</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.8</td>\n",
       "      <td>{'C': 10, 'gamma': 0.8, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.893333</td>\n",
       "      <td>0.058189</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>0.002000</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>10</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.8</td>\n",
       "      <td>{'C': 10, 'gamma': 0.8, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.893333</td>\n",
       "      <td>0.058189</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22</td>\n",
       "      <td>0.003800</td>\n",
       "      <td>0.000873</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>0.000491</td>\n",
       "      <td>100</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.5</td>\n",
       "      <td>{'C': 100, 'gamma': 0.5, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.890000</td>\n",
       "      <td>0.056738</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23</td>\n",
       "      <td>0.006799</td>\n",
       "      <td>0.009507</td>\n",
       "      <td>0.000501</td>\n",
       "      <td>0.000501</td>\n",
       "      <td>100</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 100, 'gamma': 0.1, 'kernel': 'rbf'}</td>\n",
       "      <td>0.838710</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.064315</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24</td>\n",
       "      <td>0.002800</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>100</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.2</td>\n",
       "      <td>{'C': 100, 'gamma': 0.2, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.064784</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25</td>\n",
       "      <td>0.003900</td>\n",
       "      <td>0.002166</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>100</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.3</td>\n",
       "      <td>{'C': 100, 'gamma': 0.3, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.890000</td>\n",
       "      <td>0.064095</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26</td>\n",
       "      <td>0.005600</td>\n",
       "      <td>0.006500</td>\n",
       "      <td>0.000600</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>100</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.4</td>\n",
       "      <td>{'C': 100, 'gamma': 0.4, 'kernel': 'rbf'}</td>\n",
       "      <td>0.838710</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.053881</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27</td>\n",
       "      <td>0.004000</td>\n",
       "      <td>0.000632</td>\n",
       "      <td>0.000600</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>100</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.6</td>\n",
       "      <td>{'C': 100, 'gamma': 0.6, 'kernel': 'rbf'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.883333</td>\n",
       "      <td>0.064078</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>28</td>\n",
       "      <td>0.006600</td>\n",
       "      <td>0.005886</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>100</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.7</td>\n",
       "      <td>{'C': 100, 'gamma': 0.7, 'kernel': 'rbf'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.893333</td>\n",
       "      <td>0.061512</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>29</td>\n",
       "      <td>0.004400</td>\n",
       "      <td>0.001801</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>100</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.8</td>\n",
       "      <td>{'C': 100, 'gamma': 0.8, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.055551</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30</td>\n",
       "      <td>0.005700</td>\n",
       "      <td>0.004197</td>\n",
       "      <td>0.000801</td>\n",
       "      <td>0.000601</td>\n",
       "      <td>100</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.8</td>\n",
       "      <td>{'C': 100, 'gamma': 0.8, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.055551</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>0.014401</td>\n",
       "      <td>0.005731</td>\n",
       "      <td>0.000100</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>1000</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.5</td>\n",
       "      <td>{'C': 1000, 'gamma': 0.5, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.058569</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>32</td>\n",
       "      <td>0.007400</td>\n",
       "      <td>0.001497</td>\n",
       "      <td>0.000600</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>1000</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 1000, 'gamma': 0.1, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.896667</td>\n",
       "      <td>0.069740</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33</td>\n",
       "      <td>0.010501</td>\n",
       "      <td>0.004296</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>0.000459</td>\n",
       "      <td>1000</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.2</td>\n",
       "      <td>{'C': 1000, 'gamma': 0.2, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.893333</td>\n",
       "      <td>0.058189</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34</td>\n",
       "      <td>0.011301</td>\n",
       "      <td>0.003437</td>\n",
       "      <td>0.000600</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>1000</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.3</td>\n",
       "      <td>{'C': 1000, 'gamma': 0.3, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.886667</td>\n",
       "      <td>0.058947</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35</td>\n",
       "      <td>0.012800</td>\n",
       "      <td>0.004729</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000489</td>\n",
       "      <td>1000</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.4</td>\n",
       "      <td>{'C': 1000, 'gamma': 0.4, 'kernel': 'rbf'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.890000</td>\n",
       "      <td>0.065450</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>36</td>\n",
       "      <td>0.014501</td>\n",
       "      <td>0.003413</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>1000</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.6</td>\n",
       "      <td>{'C': 1000, 'gamma': 0.6, 'kernel': 'rbf'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.883333</td>\n",
       "      <td>0.075243</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>37</td>\n",
       "      <td>0.014901</td>\n",
       "      <td>0.004393</td>\n",
       "      <td>0.000200</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>1000</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.7</td>\n",
       "      <td>{'C': 1000, 'gamma': 0.7, 'kernel': 'rbf'}</td>\n",
       "      <td>0.806452</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.965517</td>\n",
       "      <td>0.890000</td>\n",
       "      <td>0.072244</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>0.016301</td>\n",
       "      <td>0.005901</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>1000</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.8</td>\n",
       "      <td>{'C': 1000, 'gamma': 0.8, 'kernel': 'rbf'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.931034</td>\n",
       "      <td>0.873333</td>\n",
       "      <td>0.070045</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39</td>\n",
       "      <td>0.014401</td>\n",
       "      <td>0.003499</td>\n",
       "      <td>0.000701</td>\n",
       "      <td>0.000459</td>\n",
       "      <td>1000</td>\n",
       "      <td>rbf</td>\n",
       "      <td>0.8</td>\n",
       "      <td>{'C': 1000, 'gamma': 0.8, 'kernel': 'rbf'}</td>\n",
       "      <td>0.774194</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.931034</td>\n",
       "      <td>0.873333</td>\n",
       "      <td>0.070045</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>40 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time param_C  \\\n",
       "0        0.001800      0.000600         0.000400        0.000490       1   \n",
       "1        0.003101      0.000831         0.000200        0.000401      10   \n",
       "2        0.018201      0.009714         0.001000        0.001732     100   \n",
       "3        0.084305      0.047033         0.000501        0.000501    1000   \n",
       "4        0.001100      0.000301         0.000200        0.000400       1   \n",
       "5        0.001400      0.000489         0.000300        0.000458       1   \n",
       "6        0.001700      0.000458         0.000400        0.000490       1   \n",
       "7        0.001200      0.000400         0.000800        0.000872       1   \n",
       "8        0.001300      0.000459         0.000300        0.000458       1   \n",
       "9        0.001600      0.000490         0.000400        0.000490       1   \n",
       "10       0.001300      0.000458         0.000500        0.000500       1   \n",
       "11       0.001300      0.000458         0.000500        0.000500       1   \n",
       "12       0.001601      0.000490         0.000700        0.000458       1   \n",
       "13       0.001800      0.000400         0.000300        0.000458      10   \n",
       "14       0.001700      0.000458         0.000600        0.000490      10   \n",
       "15       0.002100      0.000301         0.000300        0.000458      10   \n",
       "16       0.001899      0.000300         0.000501        0.000501      10   \n",
       "17       0.001799      0.000401         0.000601        0.000491      10   \n",
       "18       0.002000      0.000447         0.000500        0.000671      10   \n",
       "19       0.001899      0.000300         0.000601        0.000490      10   \n",
       "20       0.002000      0.000448         0.000601        0.000664      10   \n",
       "21       0.002000      0.000002         0.000400        0.000490      10   \n",
       "22       0.003800      0.000873         0.000401        0.000491     100   \n",
       "23       0.006799      0.009507         0.000501        0.000501     100   \n",
       "24       0.002800      0.000400         0.000500        0.000500     100   \n",
       "25       0.003900      0.002166         0.000300        0.000458     100   \n",
       "26       0.005600      0.006500         0.000600        0.000490     100   \n",
       "27       0.004000      0.000632         0.000600        0.000490     100   \n",
       "28       0.006600      0.005886         0.000400        0.000490     100   \n",
       "29       0.004400      0.001801         0.000500        0.000500     100   \n",
       "30       0.005700      0.004197         0.000801        0.000601     100   \n",
       "31       0.014401      0.005731         0.000100        0.000300    1000   \n",
       "32       0.007400      0.001497         0.000600        0.000490    1000   \n",
       "33       0.010501      0.004296         0.000300        0.000459    1000   \n",
       "34       0.011301      0.003437         0.000600        0.000490    1000   \n",
       "35       0.012800      0.004729         0.000400        0.000489    1000   \n",
       "36       0.014501      0.003413         0.000400        0.000490    1000   \n",
       "37       0.014901      0.004393         0.000200        0.000400    1000   \n",
       "38       0.016301      0.005901         0.000500        0.000500    1000   \n",
       "39       0.014401      0.003499         0.000701        0.000459    1000   \n",
       "\n",
       "   param_kernel param_gamma                                      params  \\\n",
       "0        linear         NaN                {'C': 1, 'kernel': 'linear'}   \n",
       "1        linear         NaN               {'C': 10, 'kernel': 'linear'}   \n",
       "2        linear         NaN              {'C': 100, 'kernel': 'linear'}   \n",
       "3        linear         NaN             {'C': 1000, 'kernel': 'linear'}   \n",
       "4           rbf         0.5     {'C': 1, 'gamma': 0.5, 'kernel': 'rbf'}   \n",
       "5           rbf         0.1     {'C': 1, 'gamma': 0.1, 'kernel': 'rbf'}   \n",
       "6           rbf         0.2     {'C': 1, 'gamma': 0.2, 'kernel': 'rbf'}   \n",
       "7           rbf         0.3     {'C': 1, 'gamma': 0.3, 'kernel': 'rbf'}   \n",
       "8           rbf         0.4     {'C': 1, 'gamma': 0.4, 'kernel': 'rbf'}   \n",
       "9           rbf         0.6     {'C': 1, 'gamma': 0.6, 'kernel': 'rbf'}   \n",
       "10          rbf         0.7     {'C': 1, 'gamma': 0.7, 'kernel': 'rbf'}   \n",
       "11          rbf         0.8     {'C': 1, 'gamma': 0.8, 'kernel': 'rbf'}   \n",
       "12          rbf         0.8     {'C': 1, 'gamma': 0.8, 'kernel': 'rbf'}   \n",
       "13          rbf         0.5    {'C': 10, 'gamma': 0.5, 'kernel': 'rbf'}   \n",
       "14          rbf         0.1    {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}   \n",
       "15          rbf         0.2    {'C': 10, 'gamma': 0.2, 'kernel': 'rbf'}   \n",
       "16          rbf         0.3    {'C': 10, 'gamma': 0.3, 'kernel': 'rbf'}   \n",
       "17          rbf         0.4    {'C': 10, 'gamma': 0.4, 'kernel': 'rbf'}   \n",
       "18          rbf         0.6    {'C': 10, 'gamma': 0.6, 'kernel': 'rbf'}   \n",
       "19          rbf         0.7    {'C': 10, 'gamma': 0.7, 'kernel': 'rbf'}   \n",
       "20          rbf         0.8    {'C': 10, 'gamma': 0.8, 'kernel': 'rbf'}   \n",
       "21          rbf         0.8    {'C': 10, 'gamma': 0.8, 'kernel': 'rbf'}   \n",
       "22          rbf         0.5   {'C': 100, 'gamma': 0.5, 'kernel': 'rbf'}   \n",
       "23          rbf         0.1   {'C': 100, 'gamma': 0.1, 'kernel': 'rbf'}   \n",
       "24          rbf         0.2   {'C': 100, 'gamma': 0.2, 'kernel': 'rbf'}   \n",
       "25          rbf         0.3   {'C': 100, 'gamma': 0.3, 'kernel': 'rbf'}   \n",
       "26          rbf         0.4   {'C': 100, 'gamma': 0.4, 'kernel': 'rbf'}   \n",
       "27          rbf         0.6   {'C': 100, 'gamma': 0.6, 'kernel': 'rbf'}   \n",
       "28          rbf         0.7   {'C': 100, 'gamma': 0.7, 'kernel': 'rbf'}   \n",
       "29          rbf         0.8   {'C': 100, 'gamma': 0.8, 'kernel': 'rbf'}   \n",
       "30          rbf         0.8   {'C': 100, 'gamma': 0.8, 'kernel': 'rbf'}   \n",
       "31          rbf         0.5  {'C': 1000, 'gamma': 0.5, 'kernel': 'rbf'}   \n",
       "32          rbf         0.1  {'C': 1000, 'gamma': 0.1, 'kernel': 'rbf'}   \n",
       "33          rbf         0.2  {'C': 1000, 'gamma': 0.2, 'kernel': 'rbf'}   \n",
       "34          rbf         0.3  {'C': 1000, 'gamma': 0.3, 'kernel': 'rbf'}   \n",
       "35          rbf         0.4  {'C': 1000, 'gamma': 0.4, 'kernel': 'rbf'}   \n",
       "36          rbf         0.6  {'C': 1000, 'gamma': 0.6, 'kernel': 'rbf'}   \n",
       "37          rbf         0.7  {'C': 1000, 'gamma': 0.7, 'kernel': 'rbf'}   \n",
       "38          rbf         0.8  {'C': 1000, 'gamma': 0.8, 'kernel': 'rbf'}   \n",
       "39          rbf         0.8  {'C': 1000, 'gamma': 0.8, 'kernel': 'rbf'}   \n",
       "\n",
       "    split0_test_score  split1_test_score  ...  split3_test_score  \\\n",
       "0            0.741935           0.833333  ...           0.800000   \n",
       "1            0.774194           0.833333  ...           0.800000   \n",
       "2            0.774194           0.833333  ...           0.800000   \n",
       "3            0.774194           0.833333  ...           0.800000   \n",
       "4            0.806452           0.966667  ...           0.933333   \n",
       "5            0.838710           0.900000  ...           0.866667   \n",
       "6            0.838710           0.933333  ...           0.900000   \n",
       "7            0.838710           0.933333  ...           0.900000   \n",
       "8            0.838710           0.966667  ...           0.900000   \n",
       "9            0.806452           0.966667  ...           0.933333   \n",
       "10           0.806452           0.966667  ...           0.933333   \n",
       "11           0.806452           0.933333  ...           0.900000   \n",
       "12           0.806452           0.933333  ...           0.900000   \n",
       "13           0.774194           0.933333  ...           0.900000   \n",
       "14           0.838710           0.900000  ...           0.900000   \n",
       "15           0.838710           0.966667  ...           0.900000   \n",
       "16           0.838710           0.966667  ...           0.933333   \n",
       "17           0.838710           0.966667  ...           0.933333   \n",
       "18           0.774194           0.933333  ...           0.866667   \n",
       "19           0.806452           0.933333  ...           0.866667   \n",
       "20           0.806452           0.933333  ...           0.866667   \n",
       "21           0.806452           0.933333  ...           0.866667   \n",
       "22           0.806452           0.933333  ...           0.900000   \n",
       "23           0.838710           0.966667  ...           0.933333   \n",
       "24           0.806452           0.966667  ...           0.933333   \n",
       "25           0.806452           0.933333  ...           0.866667   \n",
       "26           0.838710           0.933333  ...           0.866667   \n",
       "27           0.774194           0.933333  ...           0.866667   \n",
       "28           0.774194           0.933333  ...           0.933333   \n",
       "29           0.806452           0.933333  ...           0.933333   \n",
       "30           0.806452           0.933333  ...           0.933333   \n",
       "31           0.806452           0.933333  ...           0.966667   \n",
       "32           0.806452           0.966667  ...           0.933333   \n",
       "33           0.806452           0.933333  ...           0.866667   \n",
       "34           0.806452           0.933333  ...           0.900000   \n",
       "35           0.774194           0.933333  ...           0.933333   \n",
       "36           0.774194           0.900000  ...           0.966667   \n",
       "37           0.806452           0.933333  ...           0.966667   \n",
       "38           0.774194           0.933333  ...           0.900000   \n",
       "39           0.774194           0.933333  ...           0.900000   \n",
       "\n",
       "    split4_test_score  split5_test_score  split6_test_score  \\\n",
       "0            0.733333           0.666667           0.866667   \n",
       "1            0.733333           0.666667           0.866667   \n",
       "2            0.733333           0.666667           0.866667   \n",
       "3            0.733333           0.666667           0.866667   \n",
       "4            0.866667           0.833333           0.933333   \n",
       "5            0.866667           0.833333           0.933333   \n",
       "6            0.866667           0.833333           0.933333   \n",
       "7            0.866667           0.833333           0.933333   \n",
       "8            0.866667           0.833333           0.933333   \n",
       "9            0.900000           0.800000           0.933333   \n",
       "10           0.900000           0.833333           0.933333   \n",
       "11           0.900000           0.866667           0.933333   \n",
       "12           0.900000           0.866667           0.933333   \n",
       "13           0.833333           0.866667           0.900000   \n",
       "14           0.866667           0.833333           0.933333   \n",
       "15           0.866667           0.800000           0.933333   \n",
       "16           0.866667           0.800000           0.933333   \n",
       "17           0.866667           0.833333           0.933333   \n",
       "18           0.866667           0.866667           0.900000   \n",
       "19           0.866667           0.866667           0.933333   \n",
       "20           0.866667           0.866667           0.933333   \n",
       "21           0.866667           0.866667           0.933333   \n",
       "22           0.866667           0.866667           0.933333   \n",
       "23           0.866667           0.800000           0.933333   \n",
       "24           0.866667           0.866667           0.933333   \n",
       "25           0.833333           0.866667           0.900000   \n",
       "26           0.866667           0.866667           0.933333   \n",
       "27           0.866667           0.833333           0.933333   \n",
       "28           0.866667           0.833333           0.933333   \n",
       "29           0.866667           0.833333           0.933333   \n",
       "30           0.866667           0.833333           0.933333   \n",
       "31           0.866667           0.833333           0.933333   \n",
       "32           0.866667           0.833333           0.933333   \n",
       "33           0.866667           0.866667           0.933333   \n",
       "34           0.866667           0.833333           0.933333   \n",
       "35           0.866667           0.833333           0.933333   \n",
       "36           0.866667           0.800000           0.933333   \n",
       "37           0.866667           0.800000           0.933333   \n",
       "38           0.833333           0.800000           0.933333   \n",
       "39           0.833333           0.800000           0.933333   \n",
       "\n",
       "    split7_test_score  split8_test_score  split9_test_score  mean_test_score  \\\n",
       "0            0.933333           0.933333           0.896552         0.813333   \n",
       "1            0.933333           0.933333           0.931034         0.816667   \n",
       "2            0.933333           0.933333           0.931034         0.816667   \n",
       "3            0.933333           0.933333           0.931034         0.816667   \n",
       "4            0.933333           0.966667           0.965517         0.900000   \n",
       "5            0.933333           0.966667           0.965517         0.893333   \n",
       "6            0.933333           0.966667           0.965517         0.900000   \n",
       "7            0.933333           0.966667           0.965517         0.900000   \n",
       "8            0.933333           0.966667           0.965517         0.900000   \n",
       "9            0.933333           0.966667           0.965517         0.900000   \n",
       "10           0.933333           0.966667           0.965517         0.903333   \n",
       "11           0.933333           1.000000           0.965517         0.900000   \n",
       "12           0.933333           1.000000           0.965517         0.900000   \n",
       "13           0.933333           0.966667           0.965517         0.886667   \n",
       "14           0.933333           0.966667           0.965517         0.890000   \n",
       "15           0.933333           0.966667           0.965517         0.893333   \n",
       "16           0.933333           0.966667           0.965517         0.896667   \n",
       "17           0.933333           1.000000           0.965517         0.903333   \n",
       "18           0.933333           1.000000           0.965517         0.890000   \n",
       "19           0.933333           0.966667           0.965517         0.893333   \n",
       "20           0.933333           0.966667           0.965517         0.893333   \n",
       "21           0.933333           0.966667           0.965517         0.893333   \n",
       "22           0.866667           0.966667           0.965517         0.890000   \n",
       "23           0.933333           0.966667           0.965517         0.900000   \n",
       "24           0.933333           0.933333           0.965517         0.896667   \n",
       "25           0.933333           1.000000           0.965517         0.890000   \n",
       "26           0.933333           0.966667           0.965517         0.896667   \n",
       "27           0.900000           0.966667           0.965517         0.883333   \n",
       "28           0.900000           0.966667           0.965517         0.893333   \n",
       "29           0.900000           0.966667           0.965517         0.896667   \n",
       "30           0.900000           0.966667           0.965517         0.896667   \n",
       "31           0.900000           0.966667           0.965517         0.900000   \n",
       "32           0.933333           0.966667           0.965517         0.896667   \n",
       "33           0.933333           0.966667           0.965517         0.893333   \n",
       "34           0.866667           0.966667           0.965517         0.886667   \n",
       "35           0.900000           0.966667           0.965517         0.890000   \n",
       "36           0.900000           0.966667           0.965517         0.883333   \n",
       "37           0.900000           0.966667           0.965517         0.890000   \n",
       "38           0.900000           0.966667           0.931034         0.873333   \n",
       "39           0.900000           0.966667           0.931034         0.873333   \n",
       "\n",
       "    std_test_score  rank_test_score  \n",
       "0         0.088598               40  \n",
       "1         0.093724               37  \n",
       "2         0.093724               37  \n",
       "3         0.093724               37  \n",
       "4         0.064008                3  \n",
       "5         0.050363               18  \n",
       "6         0.050802                3  \n",
       "7         0.050802                3  \n",
       "8         0.058905                3  \n",
       "9         0.067390                3  \n",
       "10        0.063046                1  \n",
       "11        0.067390                3  \n",
       "12        0.067390                3  \n",
       "13        0.063991               31  \n",
       "14        0.060853               25  \n",
       "15        0.068983               18  \n",
       "16        0.070022               12  \n",
       "17        0.070022                1  \n",
       "18        0.067127               25  \n",
       "19        0.058189               18  \n",
       "20        0.058189               18  \n",
       "21        0.058189               18  \n",
       "22        0.056738               25  \n",
       "23        0.064315                3  \n",
       "24        0.064784               12  \n",
       "25        0.064095               25  \n",
       "26        0.053881               12  \n",
       "27        0.064078               33  \n",
       "28        0.061512               18  \n",
       "29        0.055551               12  \n",
       "30        0.055551               12  \n",
       "31        0.058569                3  \n",
       "32        0.069740               12  \n",
       "33        0.058189               18  \n",
       "34        0.058947               31  \n",
       "35        0.065450               25  \n",
       "36        0.075243               33  \n",
       "37        0.072244               25  \n",
       "38        0.070045               35  \n",
       "39        0.070045               35  \n",
       "\n",
       "[40 rows x 21 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(grid_search.cv_results_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=1, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma=0.7, kernel='rbf',\n",
       "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
       "    verbose=False)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.best_estimator_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9033333333333333"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 1, 'gamma': 0.7, 'kernel': 'rbf'}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Visualizing the training results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_train, y_train\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('kernel SVC (Training set)')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Estimated Salary')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11. Visualizing the test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_test, y_test\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('kernel SVC (Test set)')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Estimated Salary')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
